{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the required modules \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "#import pandas_profiling as pp\n",
    "from matplotlib import pyplot as plt \n",
    "import streamlit as st\n",
    "%matplotlib inline "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2021-06-15 19:58:33--  http://composion/\n",
      "Resolving composion (composion)... failed: nodename nor servname provided, or not known.\n",
      "wget: unable to resolve host address ‘composion’\n",
      "--2021-06-15 19:58:33--  http://of/\n",
      "Resolving of (of)... failed: nodename nor servname provided, or not known.\n",
      "wget: unable to resolve host address ‘of’\n",
      "--2021-06-15 19:58:33--  http://ceramics.csv/\n",
      "Resolving ceramics.csv (ceramics.csv)... failed: nodename nor servname provided, or not known.\n",
      "wget: unable to resolve host address ‘ceramics.csv’\n",
      "--2021-06-15 19:58:33--  http://archive.ics.uci.edu/ml/machine-learning-databases/00583/Chemical%20Composion%20of%20Ceramic.csv\n",
      "Resolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.252\n",
      "Connecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.252|:80... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 8672 (8.5K) [application/x-httpd-php]\n",
      "Saving to: ‘chemical’\n",
      "\n",
      "chemical            100%[===================>]   8.47K  --.-KB/s    in 0s      \n",
      "\n",
      "2021-06-15 19:58:33 (35.5 MB/s) - ‘chemical’ saved [8672/8672]\n",
      "\n",
      "FINISHED --2021-06-15 19:58:33--\n",
      "Total wall clock time: 0.4s\n",
      "Downloaded: 1 files, 8.5K in 0s (35.5 MB/s)\n"
     ]
    }
   ],
   "source": [
    "!wget -O chemical composion of ceramics.csv http://archive.ics.uci.edu/ml/machine-learning-databases/00583/Chemical%20Composion%20of%20Ceramic.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-06-15 19:58:34.368 WARNING root: \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run /opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "st.title('Welcome to Data Science 1 Web Application')\n",
    "\n",
    "uploaded_file = st.file_uploader(\"Choose a file\")\n",
    "if uploaded_file is not None:\n",
    "  df = pd.read_csv(uploaded_file)\n",
    "  st.write(df)\n",
    "\n",
    "\n",
    "st.header('\\nClustering of chemical composition of Ceramics')\n",
    "st.subheader('Introduction:\\n\\n')\n",
    "\n",
    "\n",
    "st.write(\"\"\"\n",
    "In general, clustering is a method/technique of dividing data points into distinct groups such that data points belonging to same group have more similarity to other data points in the same group that those in other groups. This method of identifying and grouping similar data points in a large dataset into one cluster is one of the most widely used technique in machine learning and data science. This unsupervised learning technique is frequently used in statistical data analysis and machine learning to design a model to predict the future assumptions. Moreover clustering is used in several fields like pattern recognition, image analysis and bioinformatics.\n",
    "\n",
    "Based on cluster model and the type of algorithms used, clustering can be categorised into five distinct types:\\n\n",
    "1) Hierarchical clustering\\n\n",
    "2) Partitioning based clustering (k-means clustering)\\n\n",
    "3) Density based clustering \\n\n",
    "4) Distribution based clustering \\n\n",
    "5) Grid based clustering\\n\n",
    "\n",
    "So let us start with an example dataset.\\n \n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Description of dataset:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "There are multiple features in the given dataset. Each rows represents the ceramic sample from two different kilns\n",
    "used for the categorization and each columns represents the amount of chemical elements presented in the respective\n",
    "ceramic samples.\n",
    "The given dataset consists of 88 instances and 19 different attributes. The chosen dataset describes the chemical composition of celadon body and glaze from Longquan kiln and Jingdezhen kiln in China respectively. The chemical composition was examined by using Energy Dispersive X-ray Fluorescence (EDXRF) technology. The classification of ceramic samples based on their composition was performed using a statistical technique called Random Forest. The samples are categorized according to different cultural eras and kilns that were used to manufacture them. 44 samples were used to examine the chemical composition of celadon body and the same samples were examined again to determine the composition of glaze in those samples. \n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading the dataset\n",
    "data = \"Chemical\"\n",
    "df1 = pd.read_csv(data)\n",
    "df1.head()\n",
    "\n",
    "\n",
    "st.write(df1.head(20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Goal of the project:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "The aim of the project is to classify celadon body and glaze based on their chemical composition. Furthermore, the analysis regarding similarities and differences between ceramic composition during celadon manufacture in Longquan kiln and Jingdezhen kiln is also performed. Hierarchical clustering method is applied to obtain the results of clustering analysis. \n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ceramic Name</th>\n",
       "      <th>Part</th>\n",
       "      <th>Na2O</th>\n",
       "      <th>MgO</th>\n",
       "      <th>Al2O3</th>\n",
       "      <th>SiO2</th>\n",
       "      <th>K2O</th>\n",
       "      <th>CaO</th>\n",
       "      <th>TiO2</th>\n",
       "      <th>Fe2O3</th>\n",
       "      <th>...</th>\n",
       "      <th>CuO</th>\n",
       "      <th>ZnO</th>\n",
       "      <th>PbO2</th>\n",
       "      <th>Rb2O</th>\n",
       "      <th>SrO</th>\n",
       "      <th>Y2O3</th>\n",
       "      <th>ZrO2</th>\n",
       "      <th>P2O5</th>\n",
       "      <th>Part_Body</th>\n",
       "      <th>Part_Glaze</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>FLQ-1-b</td>\n",
       "      <td>Body</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.38</td>\n",
       "      <td>19.61</td>\n",
       "      <td>71.99</td>\n",
       "      <td>4.84</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.18</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>70</td>\n",
       "      <td>10</td>\n",
       "      <td>430</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>80</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>FLQ-2-b</td>\n",
       "      <td>Body</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.47</td>\n",
       "      <td>21.19</td>\n",
       "      <td>70.09</td>\n",
       "      <td>4.98</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.09</td>\n",
       "      <td>1.12</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>80</td>\n",
       "      <td>40</td>\n",
       "      <td>430</td>\n",
       "      <td>-10</td>\n",
       "      <td>40</td>\n",
       "      <td>100</td>\n",
       "      <td>110</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>FLQ-3-b</td>\n",
       "      <td>Body</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.19</td>\n",
       "      <td>18.60</td>\n",
       "      <td>74.70</td>\n",
       "      <td>3.47</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.07</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>380</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>80</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>FLQ-4-b</td>\n",
       "      <td>Body</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.30</td>\n",
       "      <td>18.01</td>\n",
       "      <td>74.19</td>\n",
       "      <td>4.01</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.09</td>\n",
       "      <td>1.23</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>70</td>\n",
       "      <td>60</td>\n",
       "      <td>380</td>\n",
       "      <td>10</td>\n",
       "      <td>40</td>\n",
       "      <td>70</td>\n",
       "      <td>210</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>FLQ-5-b</td>\n",
       "      <td>Body</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.36</td>\n",
       "      <td>18.41</td>\n",
       "      <td>73.99</td>\n",
       "      <td>4.33</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.05</td>\n",
       "      <td>1.19</td>\n",
       "      <td>...</td>\n",
       "      <td>40</td>\n",
       "      <td>90</td>\n",
       "      <td>40</td>\n",
       "      <td>360</td>\n",
       "      <td>10</td>\n",
       "      <td>30</td>\n",
       "      <td>80</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Ceramic Name  Part  Na2O   MgO  Al2O3   SiO2   K2O   CaO  TiO2  Fe2O3  ...  \\\n",
       "0      FLQ-1-b  Body  0.62  0.38  19.61  71.99  4.84  0.31  0.07   1.18  ...   \n",
       "1      FLQ-2-b  Body  0.57  0.47  21.19  70.09  4.98  0.49  0.09   1.12  ...   \n",
       "2      FLQ-3-b  Body  0.49  0.19  18.60  74.70  3.47  0.43  0.06   1.07  ...   \n",
       "3      FLQ-4-b  Body  0.89  0.30  18.01  74.19  4.01  0.27  0.09   1.23  ...   \n",
       "4      FLQ-5-b  Body  0.03  0.36  18.41  73.99  4.33  0.65  0.05   1.19  ...   \n",
       "\n",
       "   CuO  ZnO  PbO2  Rb2O  SrO  Y2O3  ZrO2  P2O5  Part_Body  Part_Glaze  \n",
       "0   10   70    10   430    0    40    80    90          1           0  \n",
       "1   20   80    40   430  -10    40   100   110          1           0  \n",
       "2   20   50    50   380   40    40    80   200          1           0  \n",
       "3   20   70    60   380   10    40    70   210          1           0  \n",
       "4   40   90    40   360   10    30    80   150          1           0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#since the dataset is labeled, i assigned two dummy variables for \"Part\" attribute as \"Part_Body\" = 1 and \"Part_Glaze\" = 0\n",
    "#this is very useful to determine the accuracy of a model later\n",
    "\n",
    "df1_part= pd.get_dummies(df1[[\"Part\"]])\n",
    "\n",
    "#adding two columns at the end of dataset\n",
    "df = pd.concat([df1,df1_part],axis =1)\n",
    "\n",
    "#defining the target variables i.e. the Ceramic Names are assigned to either \"Body\" as value 1 or \"Glaze\" as valaue 0\n",
    "#x = df.iloc[:,(20)].values\n",
    "y = df.iloc[:,(19)].values\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Na2O</th>\n",
       "      <th>MgO</th>\n",
       "      <th>Al2O3</th>\n",
       "      <th>SiO2</th>\n",
       "      <th>K2O</th>\n",
       "      <th>CaO</th>\n",
       "      <th>TiO2</th>\n",
       "      <th>Fe2O3</th>\n",
       "      <th>MnO</th>\n",
       "      <th>CuO</th>\n",
       "      <th>ZnO</th>\n",
       "      <th>PbO2</th>\n",
       "      <th>Rb2O</th>\n",
       "      <th>SrO</th>\n",
       "      <th>Y2O3</th>\n",
       "      <th>ZrO2</th>\n",
       "      <th>P2O5</th>\n",
       "      <th>Part_Body</th>\n",
       "      <th>Part_Glaze</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.38</td>\n",
       "      <td>19.61</td>\n",
       "      <td>71.99</td>\n",
       "      <td>4.84</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.18</td>\n",
       "      <td>630</td>\n",
       "      <td>10</td>\n",
       "      <td>70</td>\n",
       "      <td>10</td>\n",
       "      <td>430</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>80</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.47</td>\n",
       "      <td>21.19</td>\n",
       "      <td>70.09</td>\n",
       "      <td>4.98</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.09</td>\n",
       "      <td>1.12</td>\n",
       "      <td>380</td>\n",
       "      <td>20</td>\n",
       "      <td>80</td>\n",
       "      <td>40</td>\n",
       "      <td>430</td>\n",
       "      <td>-10</td>\n",
       "      <td>40</td>\n",
       "      <td>100</td>\n",
       "      <td>110</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.19</td>\n",
       "      <td>18.60</td>\n",
       "      <td>74.70</td>\n",
       "      <td>3.47</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.07</td>\n",
       "      <td>420</td>\n",
       "      <td>20</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>380</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>80</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.30</td>\n",
       "      <td>18.01</td>\n",
       "      <td>74.19</td>\n",
       "      <td>4.01</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.09</td>\n",
       "      <td>1.23</td>\n",
       "      <td>460</td>\n",
       "      <td>20</td>\n",
       "      <td>70</td>\n",
       "      <td>60</td>\n",
       "      <td>380</td>\n",
       "      <td>10</td>\n",
       "      <td>40</td>\n",
       "      <td>70</td>\n",
       "      <td>210</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.36</td>\n",
       "      <td>18.41</td>\n",
       "      <td>73.99</td>\n",
       "      <td>4.33</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.05</td>\n",
       "      <td>1.19</td>\n",
       "      <td>380</td>\n",
       "      <td>40</td>\n",
       "      <td>90</td>\n",
       "      <td>40</td>\n",
       "      <td>360</td>\n",
       "      <td>10</td>\n",
       "      <td>30</td>\n",
       "      <td>80</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Na2O   MgO  Al2O3   SiO2   K2O   CaO  TiO2  Fe2O3  MnO  CuO  ZnO  PbO2  \\\n",
       "0  0.62  0.38  19.61  71.99  4.84  0.31  0.07   1.18  630   10   70    10   \n",
       "1  0.57  0.47  21.19  70.09  4.98  0.49  0.09   1.12  380   20   80    40   \n",
       "2  0.49  0.19  18.60  74.70  3.47  0.43  0.06   1.07  420   20   50    50   \n",
       "3  0.89  0.30  18.01  74.19  4.01  0.27  0.09   1.23  460   20   70    60   \n",
       "4  0.03  0.36  18.41  73.99  4.33  0.65  0.05   1.19  380   40   90    40   \n",
       "\n",
       "   Rb2O  SrO  Y2O3  ZrO2  P2O5  Part_Body  Part_Glaze  \n",
       "0   430    0    40    80    90          1           0  \n",
       "1   430  -10    40   100   110          1           0  \n",
       "2   380   40    40    80   200          1           0  \n",
       "3   380   10    40    70   210          1           0  \n",
       "4   360   10    30    80   150          1           0  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cleaning the dataset for the analysis\n",
    "# since the first two columns are non categorical, they need to be removed for the analysis\n",
    "df.pop(\"Ceramic Name\")\n",
    "df.pop(\"Part\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Implementation and results:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "Before starting with the clustering analysis, let's analyse the feature dataset by visualizing the distribution of datapoints of some features. \n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Scatter plot to visualize the distribution of data points before normalizing the dataset \n",
    "plot_before_normalization = plt.figure(figsize = (10,7))\n",
    "#ax= plt.scatter(df.iloc[:, 5], df.iloc[:, 7], marker='.')\n",
    "ax = plt.scatter(df[\"CaO\"],df[\"Fe2O3\"],marker ='.')\n",
    "plt.title(\"Distribution of data points as scatter plot before normalization\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "\n",
    "\n",
    "#st.bar_chart(df[\"Fe2O3\"])\n",
    "#st.bar_chart(df[\"CaO\"])\n",
    "st.write(plot_before_normalization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.write(\"\"\"\n",
    "Let's look at the dendrogram to have a visualization of how it looks like before normalizing the dataset. We can compare this dendrogram with the dendrogram after normalizing the datasete in order to understand why is it so important to normalize the data before starting with any type of data analysis. Here we use \"Euclidean distance\" as a distance measure and ward linkage as the linkage criterion.\n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ploting the dendrogram of datapoints before normalizing the dataset\n",
    "from scipy.cluster import hierarchy\n",
    "dend_before_normalization = plt.figure(figsize=(10, 7))\n",
    "plt.title(\"Dendrogram before normalization\")\n",
    "plt.xlabel(\"Name of Ceramic\")\n",
    "plt.ylabel(\"Eucledian distance\")\n",
    "#cluster_predict = cluster.fit_predict(df)\n",
    "dendrogram = hierarchy.dendrogram(hierarchy.linkage(df, method='ward'))\n",
    "#print(\"\\nAccuracy of ward linkage before normalization: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "\n",
    "\n",
    "\n",
    "st.write(dend_before_normalization)\n",
    "#st.write(\"\\nAccuracy of ward linkage before normalization: \",metrics.adjusted_rand_score(cluster_predict, y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.write(\"\"\"\n",
    "Let's do one more step before starting with acutal clustering analysis. The feature dataset above needs to be cleaned. In this step the dataset with null values are either dropped or treated with the respective process. Removing the dataset with null values can result in loss of information. So, we need to be careful before doing this. In our case, the given dataset does not contain any null values. Let's creat our feature dataset by droping the first two columns representing \"Ceramic Name\" and “Part\".\n",
    "\\n\n",
    "Now we have our feature dataset. In the next step let's normalize the feature dataset so that all the variables are scaled same. Now the model is not biased towards the variable with higher values.\n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalising the data so that all the variables are scaled same. Now the model is not biased towards the variable with higher values\n",
    "from sklearn import preprocessing\n",
    "data_normalized = preprocessing.normalize(df)\n",
    "data_normalized = pd.DataFrame(data_normalized, columns=df.columns)\n",
    "data_normalized.head()\n",
    "\n",
    "\n",
    "st.write (data_normalized)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.write(\"\"\"\n",
    "The above dataset is cleaned. Now the dataset is ready for our clustering analysis.\n",
    "Before starting with the actual clustering analysis, let's analyse the feature dataset by visualizing the distribution of datapoints of some features after normalization. \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Scatter plot to visualize the distribution of data points after normalizing the dataset\n",
    "#now the dataset looks bit better\n",
    "plot_after_normalization= plt.figure(figsize = (10,7))\n",
    "#ax = plt.scatter(data_normalized.iloc[0:,5], data_normalized.iloc[0:,7], marker='.')\n",
    "ax = plt.scatter(data_normalized[\"CaO\"],data_normalized[\"Fe2O3\"],marker ='.')\n",
    "plt.title(\"Distribution of data points as scatter plot after normalization\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "\n",
    "\n",
    "st.write(plot_after_normalization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.write(\"\"\"\n",
    "Now let's visualize the dendrogram after normalizing our feature dataset. This looks much better than the previous dendrogram produced before normalizing the dataset.\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ploting the dendrogram of datapoints after normalizing the dataset\n",
    "dend_after_normalization = plt.figure(figsize=(10, 7))\n",
    "plt.title(\"Dendrogram after normalization\")\n",
    "plt.xlabel(\"Name of Ceramic\")\n",
    "plt.ylabel(\"Eucledian distance\")\n",
    "dendrogram = hierarchy.dendrogram(hierarchy.linkage(data_normalized, method='ward'))\n",
    "\n",
    "\n",
    "st.write(dend_after_normalization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.write(\"\"\"\n",
    "Here the x-axis represents the ceramic samples and y-axis represents the Euclidean distance between those samples. Furthermore, we need to define a cutoff threshold in order to determine the optimal number of clusters.\n",
    "For that we look at the longest vertical line without any horizontal line passing through it. Then the number of vertical lines intersected by this newly drawn horizontal line are counted. These intersections is equal to the number of optimal clusters formed by the respective linkage criterion. \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dend_with_cutoff = plt.figure(figsize=(10, 7))\n",
    "plt.title(\"Dendrogram after normalization with cutoff value\")\n",
    "plt.xlabel(\"Name of Ceramic\")\n",
    "plt.ylabel(\"Eucledian distance\")\n",
    "dendrogram = hierarchy.dendrogram(hierarchy.linkage(data_normalized, method='ward'))\n",
    "\n",
    "# defining the threshold to cut the dendrogram\n",
    "plt.axhline(y=2, color='r', linestyle='--')\n",
    "plt.axhline(y=1.3, color='r', linestyle='--')\n",
    "\n",
    "\n",
    "st.write(dend_with_cutoff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.write(\"\"\"\n",
    "In the above dendrogram the blue line on the left is the longest vertical line with no horizontal line passing through it. A dashed line (threshold) is drawn at 2.0 in y-axis and the number of intersections between the new dashed line and the vertical blue line is counted. In our case the optimal number clusters is 2. This threshold basically determines the shortest distance needed to form a separate cluster. If we draw a line further below the number of intersections between threshold and vertical line increases resulting more number of clusters.   \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.write(\"\"\"\n",
    "Now, let's try clustering our dataset with different linkage criterion and different values of k.\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating selectbox in streamlit webapp in order to chose the number of clusters\n",
    "sel_col,disp_col = st.beta_columns(2)\n",
    "k = sel_col.selectbox(\n",
    "    'Choose the value of k',\n",
    "    options=[1, 2, 3,4,5],index=1\n",
    "    )\n",
    "Algorithm = sel_col.selectbox('Choose the algorithm you want to run',\n",
    "                              options = ['k-means Clustering','Hierarchical Clustering',\n",
    "                                        'BFR Clustering'],index = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Ward linkage clustering:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "In the figure below two features namely Fe2O3 and CaO which are responsible for the composition of ceramic are chosen and clustered using ward linkage method. The distance metric used for clustering is \"Euclidean Distance\". As we know that the chemical composition of celadon body and glaze should be different, it is expected that two separate clusters, each representing celadon body and celadon glaze respectively, would be obtained for the selected features. As expected Ward linkage is able to detect two clusters distinguishing the difference in chemical composition of celadon body and glaze. In addition, Rand score is calculated to estimate the accuracy of this linkage method. Rand index is a function that measures the similarity of two assignments, ground truth: labels_true and prediction: labels_pred, ignoring permutations. The Rand score for ward linkage is 0.95. This shows that ward linkage is successful for providing promishing clustering results for the selected features.  \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluser prediction:  [1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Traget variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of ward linkage using rand score:  0.9545397214364223\n",
      "Accuracy of ward linkage using mutual info score:  0.9207206603043875\n",
      "Accuracy of ward linkage using v-measure score:  0.921553538364857\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# for performing hiererchical clustering using scikitlearn package\n",
    "from sklearn.cluster import AgglomerativeClustering\n",
    "from sklearn import metrics\n",
    "\n",
    "#defining the number of clusters that we wanted. 2 is the optimal number of cluster in our case\n",
    "#clustering is performed using ward linkage method\n",
    "#k = 2\n",
    "cluster = AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='ward')\n",
    "cluster_predict = cluster.fit_predict(data_normalized)\n",
    "print (\"Cluser prediction: \",cluster_predict)\n",
    "print (\"\\nTraget variable: \",y )\n",
    "#print (\"\\nCluster labels: \",cluster.labels_)\n",
    "ward_linkage = plt.figure(figsize = (10,7))\n",
    "#ax = plt.scatter(data_normalized.iloc[:,5], data_normalized.iloc[:,7], c = cluster_predict,cmap='rainbow',marker='.')\n",
    "ax = plt.scatter(data_normalized[\"CaO\"],data_normalized[\"Fe2O3\"], c = cluster_predict, cmap = 'rainbow', marker ='.')\n",
    "\n",
    "\n",
    "#plt.scatter(data_normalized.iloc[:,1], data_normalized.iloc[:,2], c = cluster_predict,cmap='rainbow')\n",
    "#plt.scatter(data_normalized.iloc[:,3], data_normalized.iloc[:,4], c = cluster_predict,cmap='rainbow')\n",
    "\n",
    "\n",
    "# accuracy of clustering is calculated.\n",
    "# cluster evaluation is done using external validation index called Rand index\n",
    "print(\"Accuracy of ward linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "\n",
    "#trying other evaluation metrices for comparison\n",
    "print(\"Accuracy of ward linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "print(\"Accuracy of ward linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))\n",
    "\n",
    "plt.title(\"Hierarchical clustering using ward linkage method\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "#plt.figtext(0.7,0.8,\"Cluster1(Red)\\nCluster2(Blue)\",fontsize = 12)\n",
    "\n",
    "\n",
    "st.write(ward_linkage)\n",
    "st.write(\"Accuracy of ward linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "st.write(\"Accuracy of ward linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "st.write(\"Accuracy of ward linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Complete linkage clustering:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "Next, Complete linkage clustering is performed for the same features. The default \"Euclidean Distance\" is used as distance metric. As we can see, this linkage criterion is not able to distinguish these features in separate clusters. Rand score is calculated to evaluate the accuracy of this clustering method. The value of rand score calculated is 0.0. This shows that complete linkage criterion is not optimal for the given dataset and therefore performs bad clustering. However, rand score of 0.0 does not necessarily mean that none of the features are assigned correctly into separate clusters. Normally ,random (uniform) label assignments have the rand score close to 0.0.     \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster prediction:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of complete linkage using rand score:  0.0\n",
      "Accuracy of complete linkage using mutual info score:  -1.5190107840345266e-16\n",
      "Accuracy of complete linkage using v-measure score:  0.021029315759475423\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#clustering is performed using complete linkage method\n",
    "cluster = AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='complete')\n",
    "cluster_predict = cluster.fit_predict(data_normalized)\n",
    "print (\"Cluster prediction: \",cluster_predict)\n",
    "print (\"\\nTarget variable: \",y)\n",
    "#print (\"Cluster labels: \",cluster.labels_)\n",
    "complete_linkage = plt.figure(figsize =(10,7))\n",
    "#ax = plt.scatter(data_normalized.iloc[:,5], data_normalized.iloc[:,7], c = cluster_predict, cmap='rainbow',marker = '.')\n",
    "ax = plt.scatter(data_normalized[\"CaO\"],data_normalized[\"Fe2O3\"], c = cluster_predict, cmap = 'rainbow', marker ='.')\n",
    "print(\"Accuracy of complete linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "print(\"Accuracy of complete linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "print(\"Accuracy of complete linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))\n",
    "plt.title(\"Hierarchical clustering using complete linkage method\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "#plt.figtext(0.7,0.8,\"Cluster1(Blue)\",fontsize = 12)\n",
    "\n",
    "\n",
    "st.write(complete_linkage)\n",
    "st.write(\"Accuracy of complete linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "st.write(\"Accuracy of complete linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "st.write(\"Accuracy of complete linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Single linkage clustering:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "Next, single linkage is chosen as the linkage criterion. The distance measure is again the default \"Euclidean Distance\". As above in the complete linkage clustering, single linkage method also fails to cluster the features into different clusters. The rand score calculated here is 0.0. This shows that single and complete linkage criterion are not optimal for the given dataset. \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster prediction:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of single linkage using rand score:  0.0\n",
      "Accuracy of single linkage using mutual info score:  -1.5190107840345266e-16\n",
      "Accuracy of single linkage using v-measure score:  0.021029315759475423\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#clustering is performed using single linkage method\n",
    "cluster = AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='single')\n",
    "cluster_predict = cluster.fit_predict(data_normalized)\n",
    "print (\"Cluster prediction: \",cluster_predict)\n",
    "print (\"\\nTarget variable: \",y)\n",
    "single_linkage = plt.figure(figsize=(10,7))\n",
    "#ax = plt.scatter(data_normalized.iloc[:,5], data_normalized.iloc[:,7], c = cluster_predict, cmap='rainbow',marker = '.')\n",
    "ax = plt.scatter(data_normalized[\"CaO\"],data_normalized[\"Fe2O3\"], c = cluster_predict, cmap = 'rainbow', marker ='.')\n",
    "print(\"Accuracy of single linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "print(\"Accuracy of single linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "print(\"Accuracy of single linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))\n",
    "plt.title(\"Hierarchical clustering using single linkage method\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "#plt.figtext(0.7,0.8,\"Cluster1(Blue)\",fontsize = 12)\n",
    "\n",
    "\n",
    "\n",
    "st.write(single_linkage)\n",
    "st.write(\"Accuracy of single linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "st.write(\"Accuracy of single linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "st.write(\"Accuracy of single linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Average linkage clustering:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "Finally, average linkage clustering is performed for the same selected features. As before default \"Euclidean distance\" is chosen as distance metric. In contrast to complete and single linkage clustering, average and ward linkage clustering produce much favourable resuts. They both have the Rand score of 0.95 and are also able to cluster two different features into separate clusters.  \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster prediction:  [1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Accuracy of average linkage using rand score:  0.9545397214364223\n",
      "Accuracy of average linkage using mutual info score:  0.9207206603043875\n",
      "Accuracy of average linkage using v-measure score:  0.921553538364857\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#clustering is performed using average linkage method\n",
    "cluster = AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='average')\n",
    "cluster_predict = cluster.fit_predict(data_normalized)\n",
    "print (\"Cluster prediction: \",cluster_predict)\n",
    "print (\"\\nTarget variable: \",y)\n",
    "#print (cluster.labels_)\n",
    "average_linkage = plt.figure(figsize=(10,7))\n",
    "#ax = plt.scatter(data_normalized.iloc[:,5], data_normalized.iloc[:,7], c = cluster_predict, cmap='rainbow',marker = '.')\n",
    "ax = plt.scatter(data_normalized[\"CaO\"],data_normalized[\"Fe2O3\"], c = cluster_predict, cmap = 'rainbow', marker ='.')\n",
    "print (\"\\nAccuracy of average linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict,y))\n",
    "print(\"Accuracy of average linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "print(\"Accuracy of average linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))\n",
    "plt.title(\"Hierarchical clustering using average linkage method\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "#plt.figtext(0.7,0.8,\"Cluster1(Red)\\nCluster2(Blue)\",fontsize = 12)\n",
    "\n",
    "\n",
    "\n",
    "st.write(average_linkage)\n",
    "st.write(\"Accuracy of average linkage using rand score: \",metrics.adjusted_rand_score(cluster_predict, y))\n",
    "st.write(\"Accuracy of average linkage using mutual info score: \",metrics.adjusted_mutual_info_score(cluster_predict,y))\n",
    "st.write(\"Accuracy of average linkage using v-measure score: \",metrics.v_measure_score(cluster_predict,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Analysis of the clusters:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "For the chosen value of k = 2, hierarchical clustering successfully clusters celadon body (Red cluster) and glaze (blue cluster) into two distinct cluters. From the above figure we can conclude that celadon body is composed of more Fe2O3 and less Cao. Likewise, looking at the chemical composition of celadon glaze, we can clearly see that celadon glaze contains more CaO and less Fe2O3. This shows that ward and average linkage method have precicted the clusters with high accuracy. This means, ward and average linkage criterions have produced optimal clustering results for the given dataset.    \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Analysis of celadon body:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "For this analysis the dataset was filtered again droping all the rows with category \"Glaze\". This analysis is performed in order to evaluate whether there are any differences in the chemical composition of celadon body manufactured in two different kilns: Longquan kiln and Jingdezhen kiln. There are two ditinct clusters formed where it can be seen that CaO contents of celadon body in Jingdezhen are higher than those in Longquan, whereas the Fe2O3 contents of celadon body in Longquan are higher than those of Jingdezehn. This indicates that the chemical composition of bodies is also different in those two separate kilns.       \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Na2O</th>\n",
       "      <th>MgO</th>\n",
       "      <th>Al2O3</th>\n",
       "      <th>SiO2</th>\n",
       "      <th>K2O</th>\n",
       "      <th>CaO</th>\n",
       "      <th>TiO2</th>\n",
       "      <th>Fe2O3</th>\n",
       "      <th>MnO</th>\n",
       "      <th>CuO</th>\n",
       "      <th>ZnO</th>\n",
       "      <th>PbO2</th>\n",
       "      <th>Rb2O</th>\n",
       "      <th>SrO</th>\n",
       "      <th>Y2O3</th>\n",
       "      <th>ZrO2</th>\n",
       "      <th>P2O5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.000795</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>0.025137</td>\n",
       "      <td>0.092280</td>\n",
       "      <td>0.006204</td>\n",
       "      <td>0.000397</td>\n",
       "      <td>0.000090</td>\n",
       "      <td>0.001513</td>\n",
       "      <td>0.807564</td>\n",
       "      <td>0.012818</td>\n",
       "      <td>0.089729</td>\n",
       "      <td>0.012818</td>\n",
       "      <td>0.551194</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.051274</td>\n",
       "      <td>0.102548</td>\n",
       "      <td>0.115366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.000941</td>\n",
       "      <td>0.000776</td>\n",
       "      <td>0.034984</td>\n",
       "      <td>0.115715</td>\n",
       "      <td>0.008222</td>\n",
       "      <td>0.000809</td>\n",
       "      <td>0.000149</td>\n",
       "      <td>0.001849</td>\n",
       "      <td>0.627359</td>\n",
       "      <td>0.033019</td>\n",
       "      <td>0.132076</td>\n",
       "      <td>0.066038</td>\n",
       "      <td>0.709906</td>\n",
       "      <td>-0.016509</td>\n",
       "      <td>0.066038</td>\n",
       "      <td>0.165094</td>\n",
       "      <td>0.181604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.000793</td>\n",
       "      <td>0.000308</td>\n",
       "      <td>0.030104</td>\n",
       "      <td>0.120903</td>\n",
       "      <td>0.005616</td>\n",
       "      <td>0.000696</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>0.001732</td>\n",
       "      <td>0.679775</td>\n",
       "      <td>0.032370</td>\n",
       "      <td>0.080926</td>\n",
       "      <td>0.080926</td>\n",
       "      <td>0.615034</td>\n",
       "      <td>0.064740</td>\n",
       "      <td>0.064740</td>\n",
       "      <td>0.129481</td>\n",
       "      <td>0.323702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.001371</td>\n",
       "      <td>0.000462</td>\n",
       "      <td>0.027742</td>\n",
       "      <td>0.114281</td>\n",
       "      <td>0.006177</td>\n",
       "      <td>0.000416</td>\n",
       "      <td>0.000139</td>\n",
       "      <td>0.001895</td>\n",
       "      <td>0.708575</td>\n",
       "      <td>0.030808</td>\n",
       "      <td>0.107827</td>\n",
       "      <td>0.092423</td>\n",
       "      <td>0.585345</td>\n",
       "      <td>0.015404</td>\n",
       "      <td>0.061615</td>\n",
       "      <td>0.107827</td>\n",
       "      <td>0.323480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.000053</td>\n",
       "      <td>0.000635</td>\n",
       "      <td>0.032492</td>\n",
       "      <td>0.130586</td>\n",
       "      <td>0.007642</td>\n",
       "      <td>0.001147</td>\n",
       "      <td>0.000088</td>\n",
       "      <td>0.002100</td>\n",
       "      <td>0.670668</td>\n",
       "      <td>0.070597</td>\n",
       "      <td>0.158842</td>\n",
       "      <td>0.070597</td>\n",
       "      <td>0.635369</td>\n",
       "      <td>0.017649</td>\n",
       "      <td>0.052947</td>\n",
       "      <td>0.141193</td>\n",
       "      <td>0.264737</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Na2O       MgO     Al2O3      SiO2       K2O       CaO      TiO2  \\\n",
       "0  0.000795  0.000487  0.025137  0.092280  0.006204  0.000397  0.000090   \n",
       "1  0.000941  0.000776  0.034984  0.115715  0.008222  0.000809  0.000149   \n",
       "2  0.000793  0.000308  0.030104  0.120903  0.005616  0.000696  0.000097   \n",
       "3  0.001371  0.000462  0.027742  0.114281  0.006177  0.000416  0.000139   \n",
       "4  0.000053  0.000635  0.032492  0.130586  0.007642  0.001147  0.000088   \n",
       "\n",
       "      Fe2O3       MnO       CuO       ZnO      PbO2      Rb2O       SrO  \\\n",
       "0  0.001513  0.807564  0.012818  0.089729  0.012818  0.551194  0.000000   \n",
       "1  0.001849  0.627359  0.033019  0.132076  0.066038  0.709906 -0.016509   \n",
       "2  0.001732  0.679775  0.032370  0.080926  0.080926  0.615034  0.064740   \n",
       "3  0.001895  0.708575  0.030808  0.107827  0.092423  0.585345  0.015404   \n",
       "4  0.002100  0.670668  0.070597  0.158842  0.070597  0.635369  0.017649   \n",
       "\n",
       "       Y2O3      ZrO2      P2O5  \n",
       "0  0.051274  0.102548  0.115366  \n",
       "1  0.066038  0.165094  0.181604  \n",
       "2  0.064740  0.129481  0.323702  \n",
       "3  0.061615  0.107827  0.323480  \n",
       "4  0.052947  0.141193  0.264737  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filtering only the columns with category \"Body\"\n",
    "df2 = data_normalized.iloc[0:43, 0:17]\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Clustering of the dataset with only Celadon body \n",
    "cluster = AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='ward')\n",
    "cluster_predict = cluster.fit_predict(df2)\n",
    "ward_linkage_body = plt.figure(figsize=(10,7))\n",
    "ax = plt.scatter(df2['CaO'], df2['Fe2O3'],c=cluster_predict,cmap='rainbow',marker='.')\n",
    "plt.title(\"Hierarchical clustering of celadon body using ward linkage method and Euclidean distance\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "\n",
    "\n",
    "st.write (ward_linkage_body)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Analysis of celadon glaze:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "For this analysis the dataset was filtered droping all the rows with category \"Body\". Two separarate clusters are formed and it is observed that CaO contents of celadon glaze in Longquan are higer than those in Jingdezhen. In case of Fe2O3 contents, no any significant differences are observed.\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Na2O</th>\n",
       "      <th>MgO</th>\n",
       "      <th>Al2O3</th>\n",
       "      <th>SiO2</th>\n",
       "      <th>K2O</th>\n",
       "      <th>CaO</th>\n",
       "      <th>TiO2</th>\n",
       "      <th>Fe2O3</th>\n",
       "      <th>MnO</th>\n",
       "      <th>CuO</th>\n",
       "      <th>ZnO</th>\n",
       "      <th>PbO2</th>\n",
       "      <th>Rb2O</th>\n",
       "      <th>SrO</th>\n",
       "      <th>Y2O3</th>\n",
       "      <th>ZrO2</th>\n",
       "      <th>P2O5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>44</td>\n",
       "      <td>0.001267</td>\n",
       "      <td>0.000091</td>\n",
       "      <td>0.014915</td>\n",
       "      <td>0.097184</td>\n",
       "      <td>0.007445</td>\n",
       "      <td>0.006974</td>\n",
       "      <td>0.000065</td>\n",
       "      <td>0.001358</td>\n",
       "      <td>0.718337</td>\n",
       "      <td>0.026121</td>\n",
       "      <td>0.078364</td>\n",
       "      <td>0.026121</td>\n",
       "      <td>0.404881</td>\n",
       "      <td>0.195910</td>\n",
       "      <td>0.026121</td>\n",
       "      <td>0.065303</td>\n",
       "      <td>0.509366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>0.001087</td>\n",
       "      <td>0.000350</td>\n",
       "      <td>0.009646</td>\n",
       "      <td>0.051200</td>\n",
       "      <td>0.003610</td>\n",
       "      <td>0.006609</td>\n",
       "      <td>0.000082</td>\n",
       "      <td>0.001109</td>\n",
       "      <td>0.707086</td>\n",
       "      <td>0.022329</td>\n",
       "      <td>0.029772</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.260505</td>\n",
       "      <td>0.186075</td>\n",
       "      <td>0.022329</td>\n",
       "      <td>0.044658</td>\n",
       "      <td>0.625213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>46</td>\n",
       "      <td>0.001231</td>\n",
       "      <td>0.000270</td>\n",
       "      <td>0.015987</td>\n",
       "      <td>0.081926</td>\n",
       "      <td>0.005227</td>\n",
       "      <td>0.009880</td>\n",
       "      <td>0.000082</td>\n",
       "      <td>0.001430</td>\n",
       "      <td>0.691506</td>\n",
       "      <td>0.023441</td>\n",
       "      <td>0.105484</td>\n",
       "      <td>0.046882</td>\n",
       "      <td>0.433657</td>\n",
       "      <td>0.105484</td>\n",
       "      <td>0.046882</td>\n",
       "      <td>0.093764</td>\n",
       "      <td>0.539141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>47</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>0.000284</td>\n",
       "      <td>0.008611</td>\n",
       "      <td>0.046618</td>\n",
       "      <td>0.002974</td>\n",
       "      <td>0.008916</td>\n",
       "      <td>0.000042</td>\n",
       "      <td>0.001095</td>\n",
       "      <td>0.665582</td>\n",
       "      <td>0.055465</td>\n",
       "      <td>0.048532</td>\n",
       "      <td>0.027733</td>\n",
       "      <td>0.228794</td>\n",
       "      <td>0.110930</td>\n",
       "      <td>0.027733</td>\n",
       "      <td>0.048532</td>\n",
       "      <td>0.693315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>48</td>\n",
       "      <td>0.000265</td>\n",
       "      <td>0.000738</td>\n",
       "      <td>0.009426</td>\n",
       "      <td>0.049445</td>\n",
       "      <td>0.004000</td>\n",
       "      <td>0.005670</td>\n",
       "      <td>0.000057</td>\n",
       "      <td>0.001362</td>\n",
       "      <td>0.573446</td>\n",
       "      <td>0.043008</td>\n",
       "      <td>0.086017</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.229379</td>\n",
       "      <td>0.057345</td>\n",
       "      <td>0.028672</td>\n",
       "      <td>0.057345</td>\n",
       "      <td>0.774153</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Na2O       MgO     Al2O3      SiO2       K2O       CaO      TiO2  \\\n",
       "44  0.001267  0.000091  0.014915  0.097184  0.007445  0.006974  0.000065   \n",
       "45  0.001087  0.000350  0.009646  0.051200  0.003610  0.006609  0.000082   \n",
       "46  0.001231  0.000270  0.015987  0.081926  0.005227  0.009880  0.000082   \n",
       "47  0.000097  0.000284  0.008611  0.046618  0.002974  0.008916  0.000042   \n",
       "48  0.000265  0.000738  0.009426  0.049445  0.004000  0.005670  0.000057   \n",
       "\n",
       "       Fe2O3       MnO       CuO       ZnO      PbO2      Rb2O       SrO  \\\n",
       "44  0.001358  0.718337  0.026121  0.078364  0.026121  0.404881  0.195910   \n",
       "45  0.001109  0.707086  0.022329  0.029772  0.000000  0.260505  0.186075   \n",
       "46  0.001430  0.691506  0.023441  0.105484  0.046882  0.433657  0.105484   \n",
       "47  0.001095  0.665582  0.055465  0.048532  0.027733  0.228794  0.110930   \n",
       "48  0.001362  0.573446  0.043008  0.086017  0.000000  0.229379  0.057345   \n",
       "\n",
       "        Y2O3      ZrO2      P2O5  \n",
       "44  0.026121  0.065303  0.509366  \n",
       "45  0.022329  0.044658  0.625213  \n",
       "46  0.046882  0.093764  0.539141  \n",
       "47  0.027733  0.048532  0.693315  \n",
       "48  0.028672  0.057345  0.774153  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#filtering only columns with category \"Glaze\"\n",
    "df3 =data_normalized.iloc[44:, 0:17]\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Clustering of the dataset with only Celadon glaze\n",
    "cluster = AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='ward')\n",
    "cluster_predict = cluster.fit_predict(df3)\n",
    "ward_linkage_glaze = plt.figure(figsize=(10,7))\n",
    "ax = plt.scatter(df3['CaO'], df3['Fe2O3'],c=cluster_predict,cmap='rainbow',marker='.')\n",
    "plt.title(\"Hierarchical clustering of celadon glaze using ward linkage method and Euclidean distance\")\n",
    "plt.xlabel(\"CaO\")\n",
    "plt.ylabel(\"Fe2O3\")\n",
    "\n",
    "\n",
    "st.write(ward_linkage_glaze)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "st.subheader('Conclusion:\\n\\n')\n",
    "st.write(\"\"\"\n",
    "Hierarchical clustering analysis was performed on the dataset containing 44 different samples with 17 different chemical compositions. Two important features were chosen for the analysis. The outcome of whole analysis can be evaluated and verified by using other features as well. As stated on the begining of the project, the main objective of the project was to evaluate given samples and cluster them with various strategies accordingly. Hierarchical clustering with \"ward-\" and \"average-\" linkage method are successful in producing the promishing results with higer accuracy rate. Clustering with other linkage criterion (\"single-\" and \"complete-\" linkage) is not optimal for the given dataset. In general, Agglomerative clustering has a \"rich get richer\" behaviour which leads to uneven cluster sizes and therefore generate less accurate results. This is also the case for \"single-\"and \"complete-\" linkage method during our analysis. However, \"single-\" and \"complete-\" linkage criteria can be very efficient to compute hierarchical clustering for larger datasets. During any data science analysis, it is very useful and recommended to use the evaluation measures to get an idea on how efficiently the implemented algorithm is performing. Varying the distance metric can sometimes lead to more accurate results. But it is necessary to understand the dataset in prior to applying them.        \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(df3_normalized[['CaO']].mean())\n",
    "#print (df3_normalized[['Fe2O3']].mean())\n",
    "#print (df2_normalized[['CaO']].mean())\n",
    "#print (df2_normalized[['Fe2O3']].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[NbConvertApp] Converting notebook Data_science_project_on_Hierarchical_clustering.ipynb to script\n",
      "[NbConvertApp] Writing 24793 bytes to Data_science_project_on_Hierarchical_clustering.py\n",
      "\u001b[0m\n",
      "\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n",
      "\u001b[0m\n",
      "\u001b[34m  Local URL: \u001b[0m\u001b[1mhttp://localhost:8501\u001b[0m\n",
      "\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://192.168.178.24:8501\u001b[0m\n",
      "\u001b[0m\n",
      "Cluser prediction:  [1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Traget variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of ward linkage using rand score:  0.9545397214364223\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of ward linkage using mutual info score:  0.9207206603043875\n",
      "Accuracy of ward linkage using v-measure score:  0.921553538364857\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Cluster prediction:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of complete linkage using rand score:  0.0\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of complete linkage using mutual info score:  -1.5190107840345266e-16\n",
      "Accuracy of complete linkage using v-measure score:  0.021029315759475423\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Cluster prediction:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of single linkage using rand score:  0.0\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of single linkage using mutual info score:  -1.5190107840345266e-16\n",
      "Accuracy of single linkage using v-measure score:  0.021029315759475423\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Cluster prediction:  [1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Accuracy of average linkage using rand score:  0.9545397214364223\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of average linkage using mutual info score:  0.9207206603043875\n",
      "Accuracy of average linkage using v-measure score:  0.921553538364857\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Cluser prediction:  [1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Traget variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of ward linkage using rand score:  0.9545397214364223\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of ward linkage using mutual info score:  0.9207206603043875\n",
      "Accuracy of ward linkage using v-measure score:  0.921553538364857\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Cluster prediction:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of complete linkage using rand score:  0.0\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of complete linkage using mutual info score:  -1.5190107840345266e-16\n",
      "Accuracy of complete linkage using v-measure score:  0.021029315759475423\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Cluster prediction:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "Accuracy of single linkage using rand score:  0.0\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of single linkage using mutual info score:  -1.5190107840345266e-16\n",
      "Accuracy of single linkage using v-measure score:  0.021029315759475423\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Cluster prediction:  [1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Target variable:  [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Accuracy of average linkage using rand score:  0.9545397214364223\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "Accuracy of average linkage using mutual info score:  0.9207206603043875\n",
      "Accuracy of average linkage using v-measure score:  0.921553538364857\n",
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/cluster/supervised.py:746: FutureWarning: The behavior of AMI will change in version 0.22. To match the behavior of 'v_measure_score', AMI will use average_method='arithmetic' by default.\n",
      "  FutureWarning)\n",
      "^C\n",
      "\u001b[34m  Stopping...\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "#https://github.com/ChristianFJung/NotebookToWebApp\n",
    "!jupyter nbconvert   --to script Data_science_project_on_Hierarchical_clustering.ipynb\n",
    "!awk '!/ipython/' Data_science_project_on_Hierarchical_clustering.py >  temp.py && mv temp.py app.py && rm Data_science_project_on_Hierarchical_clustering.py\n",
    "!streamlit run app.py"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
